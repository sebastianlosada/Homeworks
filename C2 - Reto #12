AuthContext

import React, { createContext, useReducer } from 'react';

export const AuthContext = createContext();

const initialState = {
  isAuthenticated: false,
  currentUser: null,
  lastVisitedPage: '/'
};

const authReducer = (state, action) => {
  switch (action.type) {
    case 'LOGIN':
      return {
        isAuthenticated: true,
        currentUser: action.payload,
        lastVisitedPage: state.lastVisitedPage
      };
    case 'LOGOUT':
      return {
        isAuthenticated: false,
        currentUser: null,
        lastVisitedPage: state.lastVisitedPage
      };
    case 'SET_LAST_VISITED_PAGE':
      return {
        ...state,
        lastVisitedPage: action.payload
      };
    default:
      return state;
  }
};

export const AuthProvider = ({ children }) => {
  const [state, dispatch] = useReducer(authReducer, initialState);

  const login = (user) => {
    dispatch({ type: 'LOGIN', payload: user });
  };

  const logout = () => {
    dispatch({ type: 'LOGOUT' });
  };

  const setLastVisitedPage = (page) => {
    dispatch({ type: 'SET_LAST_VISITED_PAGE', payload: page });
  };

  return (
    <AuthContext.Provider value={{ state, login, logout, setLastVisitedPage }}>
      {children}
    </AuthContext.Provider>
  );
};

+++++++++++++
App

import React from 'react';
import { BrowserRouter as Router, Route, Switch } from 'react-router-dom';
import { AuthProvider } from './AuthContext';
import LoginPage from './LoginPage';
import DashboardPage from './DashboardPage';
import PrivateRoute from './PrivateRoute';

function App() {
  return (
    <AuthProvider>
      <Router>
        <Switch>
          <Route exact path="/login" component={LoginPage} />
          <PrivateRoute exact path="/" component={DashboardPage} />
        </Switch>
      </Router>
    </AuthProvider>
  );
}

export default App;

++++++++++++
PrivateRoute

import React, { useContext } from 'react';
import { Route, Redirect } from 'react-router-dom';
import { AuthContext } from './AuthContext';

const PrivateRoute = ({ component: Component, ...rest }) => {
  const { state } = useContext(AuthContext);

  return (
    <Route
      {...rest}
      render={(props) =>
        state.isAuthenticated ? (
          <Component {...props} />
        ) : (
          <Redirect to="/login" />
        )
      }
    />
  );
};

export default PrivateRoute;

++++++++++++
LoginPage


import React, { useContext } from 'react';
import { Redirect } from 'react-router-dom';
import { AuthContext } from './AuthContext';

const LoginPage = () => {
  const { state, login, setLastVisitedPage } = useContext(AuthContext);

  const handleLogin = () => {
   

